name: Build APK

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Dockerfile
        run: |
          cat <<EOF > Dockerfile
          FROM ubuntu:22.04
          ENV DEBIAN_FRONTEND=noninteractive
          ENV ANDROID_SDK_ROOT=/home/builduser/.buildozer/android/platform/android-sdk
          ENV PATH=\$PATH:\$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:\$ANDROID_SDK_ROOT/platform-tools

          RUN apt-get update && apt-get install -y \
            git zip unzip openjdk-17-jdk python3-pip \
            build-essential libtool m4 automake autoconf \
            libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev \
            libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev zlib1g-dev \
            gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-libav \
            libmtdev-dev libgl1-mesa-dev libgles2-mesa-dev libusb-dev libspnav-dev \
            libasound2-dev libffi-dev libjpeg-dev libstdc++6 libncurses-dev \
            libssl-dev openssl \
            python3-setuptools python3-wheel pkg-config cmake curl sudo && \
            pip3 install --upgrade pip setuptools wheel && \
            pip3 install "Cython<3.0" virtualenv buildozer

          RUN useradd -ms /bin/bash builduser && \
            echo 'builduser ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

          RUN mkdir -p \$ANDROID_SDK_ROOT/cmdline-tools && \
            curl -o /tmp/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip && \
            unzip /tmp/cmdline-tools.zip -d /tmp/cmdline-tools && \
            mkdir -p \$ANDROID_SDK_ROOT/cmdline-tools/latest && \
            mv /tmp/cmdline-tools/cmdline-tools/* \$ANDROID_SDK_ROOT/cmdline-tools/latest/ && \
            rm -rf /tmp/cmdline-tools /tmp/cmdline-tools.zip

          RUN yes | \$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=\$ANDROID_SDK_ROOT --install "platform-tools" "platforms;android-34" "build-tools;34.0.0" && \
              yes | \$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses

          RUN ln -s \$ANDROID_SDK_ROOT/cmdline-tools/latest \$ANDROID_SDK_ROOT/tools

          WORKDIR /home/builduser/app
          EOF

      - name: Build Docker image
        run: docker build -t custom-buildozer .

      - name: Fix permissions
        run: sudo chown -R 1000:1000 ${{ github.workspace }}

      - name: Run Buildozer
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/home/builduser/app \
            -e ANDROID_SDK_ROOT=/home/builduser/.buildozer/android/platform/android-sdk \
            -e PATH=/home/builduser/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin:/home/builduser/.buildozer/android/platform/android-sdk/platform-tools:$PATH \
            custom-buildozer bash -c "
              mkdir -p /home/builduser/.buildozer/cache &&
              chown -R builduser:builduser /home/builduser/.buildozer &&
              chown -R builduser:builduser /home/builduser/app &&
              su builduser -c '
                cd /home/builduser/app &&
                echo \"==> Starte Buildozer...\" &&
                JNIUS_PXI=\$(find ~/.buildozer -name jnius_utils.pxi | head -n 1)
                if [ -n \"\$JNIUS_PXI\" ]; then
                  echo \"Patching jnius_utils.pxi...\"
                  sed -i \"s/\\blong\\b/int/g\" \"\$JNIUS_PXI\"
                fi
                buildozer android release --package-format=apk
              '
            "
            
      - name: Find APK or AAB
        id: find_apk
        run: |
          file_path=$(find . -name "*.apk" -o -name "*.aab" | head -n 1)
          echo "apk_path=$file_path" >> $GITHUB_OUTPUT

      - name: Upload APK as Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: Aurelia-APK
          path: ${{ steps.find_apk.outputs.apk_path }}

      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          name: "APK Build ${{ github.run_number }}"
          tag_name: "v${{ github.run_number }}"
          files: ${{ steps.find_apk.outputs.apk_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
