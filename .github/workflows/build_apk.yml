name: Build APK

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Dockerfile
        run: |
          cat <<EOF > Dockerfile
          FROM ubuntu:22.04

          ENV DEBIAN_FRONTEND=noninteractive
          ENV ANDROID_SDK_ROOT=/home/builduser/.buildozer/android/platform/android-sdk
          ENV PATH=\$PATH:\$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:\$ANDROID_SDK_ROOT/platform-tools

          RUN apt-get update && apt-get install -y \
              git zip unzip openjdk-17-jdk python3-pip \
              build-essential libtool m4 automake autoconf \
              libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev \
              libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev zlib1g-dev \
              gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-libav \
              libmtdev-dev libgl1-mesa-dev libgles2-mesa-dev libusb-dev libspnav-dev \
              libasound2-dev libffi-dev libjpeg-dev libstdc++6 libncurses-dev \
              python3-setuptools python3-wheel pkg-config cmake curl sudo && \
              pip3 install --upgrade "Cython<3.0" virtualenv buildozer && \
              useradd -ms /bin/bash builduser && \
              echo 'builduser ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

          RUN mkdir -p \$ANDROID_SDK_ROOT/cmdline-tools && \
              curl -o /tmp/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip && \
              unzip /tmp/cmdline-tools.zip -d /tmp && \
              mv /tmp/cmdline-tools \$ANDROID_SDK_ROOT/cmdline-tools/latest && \
              rm /tmp/cmdline-tools.zip && \
              mkdir -p \$ANDROID_SDK_ROOT/tools/bin && \
              ln -s \$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager \$ANDROID_SDK_ROOT/tools/bin/sdkmanager

          # Build-Tools 36 installieren und Lizenzen akzeptieren
          RUN yes | \$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=\$ANDROID_SDK_ROOT --install "build-tools;36.0.0" && \
              yes | \$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=\$ANDROID_SDK_ROOT --licenses

          WORKDIR /home/builduser/app
          EOF

      - name: Build Docker image
        run: docker build -t custom-buildozer .

      - name: Fix permissions
        run: sudo chown -R 1000:1000 .

      - name: Run Buildozer as non-root, fix jnius_utils.pxi and build
        run: |
          docker run --rm \
          -v ${{ github.workspace }}:/home/builduser/app \
          custom-buildozer bash -c "\
            mkdir -p /home/builduser/.buildozer/cache && \
            chown -R builduser:builduser /home/builduser/.buildozer && \
            chown -R builduser:builduser /home/builduser/app && \
            su builduser -c '\
              cd /home/builduser/app && \
              buildozer android release || true && \
              JNIUS_PXI=\"\$(find ~/.buildozer -name jnius_utils.pxi | head -n 1)\" && \
              if [ -n \"\$JNIUS_PXI\" ]; then sed -i \"s/\\blong\\b/int/g\" \"\$JNIUS_PXI\"; fi && \
              buildozer android release' \
          "

      - name: Locate APK (debug)
        id: find_apk
        run: |
          echo "Aktueller Ordner: $(pwd)"
          echo "Alle Dateien im Workspace:"
          find ${{ github.workspace }} -type f

          apk_path=$(find ${{ github.workspace }} -type f -name "*.apk" | head -n 1 || echo "")
          echo "Gefundener APK-Pfad: $apk_path"

          if [ -z "$apk_path" ]; then
            echo "Keine APK-Datei gefunden! Suche auch im app-Verzeichnis (Docker-Volume):"
            apk_path=$(find ${{ github.workspace }}/app -type f -name "*.apk" | head -n 1 || echo "")
            echo "Gefundener APK-Pfad im app-Verzeichnis: $apk_path"
          fi

          if [ -z "$apk_path" ]; then
            echo "Keine APK gefunden, Abbruch."
            exit 1
          fi

          echo "apk_path=$apk_path" >> $GITHUB_OUTPUT

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: Aurelia-APK
          path: ${{ steps.find_apk.outputs.apk_path }}
